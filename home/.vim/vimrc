""" SETTINGS """

" Enable syntax highlighting
syntax on

" Number of spaces for (auto)indent
set shiftwidth=2

" Use spaces instead of tabs
set expandtab

" Do case insensitive matching
set ignorecase

" Do smart case matching
set smartcase

" Incremental search
set incsearch

" Enable mouse usage (all modes)
set mouse=a

" Avoid backspace problems (http://vim.wikia.com/wiki/Backspace_and_delete_problems)
set backspace=indent,eol,start

" Silent bell
set vb

" Show column and line position
set ruler

" Define mapleader
let mapleader = ','

" Always show status line
set laststatus=2

" Do not highlight search results
set nohlsearch

""" START NEOBUNDLE CONFIGURATION (https://github.com/Shougo/neobundle.vim) """

if has('vim_starting')
  set rtp+=~/.vim/bundle/neobundle.vim/ "add neobundle path to runtimepath
end

call neobundle#begin(expand('~/.vim/bundle/'))

" neobundle intself
NeoBundleFetch 'Shougo/neobundle.vim'

" GitHub repos

" Better html5 support
NeoBundle 'othree/html5.vim'

" File navigation
NeoBundle 'scrooloose/nerdtree'

" Surround text
NeoBundle 'tpope/vim-surround'

" Utility functions used by other plugins
NeoBundle 'tomtom/tlib_vim'

" Better CSS syntax
NeoBundle 'hail2u/vim-css3-syntax'

" Better JS support
NeoBundle 'pangloss/vim-javascript'

" Better JSON support
NeoBundle 'leshill/vim-json'

" Utilities for rails
NeoBundle 'tpope/vim-rails'

" Utilities for ruby and gems development
NeoBundle 'tpope/vim-rake'

" Project configuration
NeoBundle 'tpope/vim-projectionist'

" Utilities for bundle
NeoBundle 'tpope/vim-bundler'

" Navigate painlessly between vim/tmux windows
NeoBundle 'christoomey/vim-tmux-navigator'

" Ruby configuration
NeoBundle 'vim-ruby/vim-ruby'

" Slim support
NeoBundle 'slim-template/vim-slim'

" Twig support
NeoBundle 'evidens/vim-twig'

" Search text under visual selection
NeoBundle 'bronson/vim-visual-star-search'

" Coffee Script support
NeoBundle 'kchmck/vim-coffee-script'

" Easily align tables
NeoBundle 'godlygeek/tabular'

" Color scheme
NeoBundle 'altercation/vim-colors-solarized'

" XML utilities
NeoBundle 'othree/xml.vim'

" Auto-completion for quotes, parens, brackets, etc.
NeoBundle 'Raimondi/delimitMate'

" Personal wiki
NeoBundle 'vimwiki/vimwiki'

" Autocompletion
NeoBundle 'Valloric/YouCompleteMe'

" Syntax error detection
NeoBundle 'scrooloose/syntastic'

" Git client
NeoBundle 'tpope/vim-fugitive'

" Easily search for, substitute, and abbreviate multiple variants of a word 
NeoBundle 'tpope/vim-abolish'

" Snippets generation
NeoBundle 'sirver/ultisnips'

" Built snippets
NeoBundle 'honza/vim-snippets'

" Tag navigation in a side window
NeoBundle 'majutsushi/tagbar'

" Multiple cursors
NeoBundle 'terryma/vim-multiple-cursors'

" Maps for bidirectional commands
NeoBundle 'tpope/vim-unimpaired'

" Enable repeating supported plugin maps with "."
NeoBundle 'tpope/vim-repeat'

" Smart command dispatching
NeoBundle 'tpope/vim-dispatch'

" Ruby ri in vim
NeoBundle 'danchoi/ri.vim'

" Git diff in the gutter
NeoBundle 'airblade/vim-gitgutter'

" File, buffer, mru, tag finder
NeoBundle 'kien/ctrlp.vim'

" Open urls, favorites and searchs from vim
NeoBundle 'waiting-for-dev/vim-www'
" NeoBundle '~/projects/vim/vim-www/', { 'type': 'nosync' }

" Auto-generate tag file
NeoBundle 'ludovicchabant/vim-gutentags'

" Elixir support
NeoBundle 'elixir-lang/vim-elixir'

" Comment stuff
NeoBundle 'tpope/vim-commentary'

" Codeclimate integration
NeoBundle 'wfleming/vim-codeclimate'

" Run your tests at the speed of thought
NeoBundle 'janko-m/vim-test'

" nvim plugins
if has('nvim')
  " Wrapper of some neovim's :terminal functions
  NeoBundle 'kassio/neoterm'
  " Adds neovim support to vim-dispatch
  NeoBundle 'radenling/vim-dispatch-neovim'
end

" vim-scripts repos
" Publish to wordpress
NeoBundle 'VimRepress'

" Makes GVim-only colorschemes Just Work in terminal Vim
NeoBundle 'CSApprox'

" Near real-time update of a file
NeoBundle 'TailMinusF'

call neobundle#end()

NeoBundleCheck

filetype plugin indent on

""" OTHER OPTIONS """

" when writting e-mails with gmail with <<It's All Text>> Firefox plugin
" (https://addons.mozilla.org/En-us/firefox/addon/its-all-text/)
" set textwidth to 80 characters
autocmd BufNewFile,BufRead mail.google.com* set tw=80

" for writing Calibre recipes (http://manual.calibre-ebook.com/news.html)
" which are python classes
autocmd BufNewFile,BufRead *.recipe set ft=python

" rabl templates are ruby files
autocmd BufNewFile,BufRead *.rabl set ft=ruby

" load some personal configuration I don't want in a public repository
if filereadable($HOME.'/.vim/vimrc_private')
  source $HOME/.vim/vimrc_private
endif

" encryption
" https://github.com/neovim/neovim/issues/701
if !has('nvim')
  set cm=blowfish "use blowfish for encryption
  autocmd BufNewFile,BufRead *.enc set nobackup noswapfile nowritebackup viminfo= "enc extension will be used for encrypted files
end

" git
autocmd Filetype gitcommit setlocal spell textwidth=72 "commit messages with spell checking and textwidth
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P "add git branch to the status line with fugitive

" command to open easily this file
command! Evimrc e ~/.vim/vimrc
command! Svimrc sp ~/.vim/vimrc
command! Vvimrc vs ~/.vim/vimrc

" command to reload local vim configuration
command! Vimrc source $MYVIMRC

" command to open easily my main zsh config file
command! Eoh e ~/.oh-my-zsh/custom/custom.zsh
command! Soh sp ~/.oh-my-zsh/custom/custom.zsh
command! Voh vp ~/.oh-my-zsh/custom/custom.zsh

" mapping to close quickfix windows
nnoremap <F8> :cclose<CR>

" toggle search matches highlighting
:noremap <F12> :set hlsearch!<CR>

" indent all file & return to current line
nnoremap <F6> gg=G''

" force page refresing
nnoremap <F5> :redraw!<CR>

" tab navigation
nnoremap <leader>tp :tabprevious<CR>
nnoremap <leader>tn :tabNext<CR>
nnoremap <leader>tP :tabfirst<CR>
nnoremap <leader>tN :tablast<CR>

" Easily find todo's
nnoremap <leader><leader>t :Ggrep TODO:<CR>

" Jump to last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

""" PLUGINS CONFIGURATION """

" tagbar
nmap <leader>g :TagbarToggle<CR>

" syntastic
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['php', 'ruby', 'css', 'html'], }
let g:syntastic_php_checkers = ['php']
let g:syntastic_ruby_checkers = ['ruby', 'rubocop', 'reek']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 1

" vimwiki
let g:vimwiki_list = [{'path': '~/wiki/', 'path_html': '~/wiki_html/', 'syntax': 'markdown', 'ext': '.md'}]

" ultisnips & youcompleteme
" http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme/18685821#18685821
" https://github.com/Valloric/YouCompleteMe/issues/36
" function! g:UltiSnips_Complete()
"   call UltiSnips#ExpandSnippet()
"   if g:ulti_expand_res == 0
"     if pumvisible()
"       return "\<C-n>"
"     else
"       call UltiSnips#JumpForwards()
"       if g:ulti_jump_forwards_res == 0
"         return "\<TAB>"
"       endif
"     endif
"   endif
"   return ""
" endfunction
" au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item 
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" fugitive
nmap <leader>gg :Git 
nmap <leader>gs :Gstatus<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gr :Gread<CR>
nmap <leader>gw :Gwrite<CR>
nmap <leader>gW :Gwrite<CR>:Gcommit<CR>
nmap <leader>gM :Gwrite<CR>:Git commit --amend<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>g. :Git add .<CR>
nmap <leader>gm :Git commit --amend<CR>
nmap <leader>gA :Git commit -a<CR>

" NERDTree
noremap <leader>n :NERDTreeToggle<CR>

""" COLOR SCHEMES """
" if $TERM == 'xterm'
set t_Co=256
colorscheme solarized

" ri
nnoremap  ,dr :call ri#OpenSearchPrompt(0)<cr> " horizontal split
nnoremap  ,dR :call ri#OpenSearchPrompt(1)<cr> " vertical split
nnoremap  ,dk :call ri#LookupNameUnderCursor()<cr> " keyword lookup

" CtrlP
" Remeber last mode (https://github.com/kien/ctrlp.vim/issues/330)
let g:ctrlp_cmd = 'call CallCtrlP()'
func! CallCtrlP()
  if exists('s:called_ctrlp')
    CtrlPLastMode
  else
    let s:called_ctrlp = 1
    CtrlP
  endif
endfunc

" www.vim
if filereadable($HOME.'/.vim/www_urls.vim')
  source $HOME/.vim/www_urls.vim
endif
let g:www_launch_cli_browser_command = "elinks {{URL}}"
let g:www_shortcut_engines = { 
      \ 'devdocs': ['Doc', '<leader>k'],
      \ 'google': ['Google'],
      \ 'duckduckgo': ['Duckduckgo'],
      \ 'github': ['Github'],
      \ }

" codeclimate
nmap <Leader>sp :CodeClimateAnalyzeProject<CR>
nmap <Leader>so :CodeClimateAnalyzeOpenFiles<CR>
nmap <Leader>sf :CodeClimateAnalyzeCurrentFile<CR>

" vim-test
nmap <silent> <leader>r :TestNearest<CR>
nmap <silent> <leader>R :TestFile<CR>
nmap <silent> <leader>A :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
let test#strategy = "dispatch"
let g:test#ruby#rspec#executable = 'docker-compose exec web spring rspec'

""" NEOVIM SPECIFIC CONFIGURATION """
if has('nvim')
  " ESC exits insert mode from a terminal buffer
  tnoremap <ESC> <C-\><C-n>
  " Transparently changing windows from a terminal buffer
  tnoremap <C-w>h <C-\><C-n><C-w>h
  tnoremap <C-w>j <C-\><C-n><C-w>j
  tnoremap <C-w>k <C-\><C-n><C-w>k
  tnoremap <C-w>l <C-\><C-n><C-w>l
  " Start insert mode when entering a terminal
  autocmd BufEnter term://* startinsert
end
