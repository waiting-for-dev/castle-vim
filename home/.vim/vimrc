""" SETTINGS """

" Enable syntax highlighting
syntax on

" Enable spell check
set spell

" Number of spaces for (auto)indent
set shiftwidth=2

" Use sh as shell
set shell=/bin/sh

" Use spaces instead of tabs
set expandtab

" Do case insensitive matching
set ignorecase

" Do smart case matching
set smartcase

" Incremental search
set incsearch

" Enable mouse usage (all modes)
set mouse=a

" Avoid backspace problems (http://vim.wikia.com/wiki/Backspace_and_delete_problems)
set backspace=indent,eol,start

" Silent bell
set vb

" Show column and line position
set ruler

" Define mapleader
let mapleader = ','

" Always show status line
set laststatus=2

" Do not highlight search results
set nohlsearch

" Number of colors
set t_Co=256

" Hide instead of closing buffers. It allows hiding buffer with unsaved
" modifications and preserve marks and undo history.
set hidden

" Two rows height for command window.
set cmdheight=2

" Higher swap update time.
set updatetime=300

" Don't give ins-completion-menu messages
set shortmess+=c

" Always display signcolumn
set signcolumn=yes

" Use <C-j> & <C-k> to move through popup candidates
inoremap <C-j> <C-n>
inoremap <C-k> <C-p>

" Use <C-j> & <C-k> to move through wildmenu candidates
cnoremap <C-j> <Right>
cnoremap <C-k> <Left>

""" OTHER CONFIGURATION """

" for writing Calibre recipes (http://manual.calibre-ebook.com/news.html)
" which are python classes
autocmd BufNewFile,BufRead *.recipe set ft=python

" rabl templates are ruby files
autocmd BufNewFile,BufRead *.rabl set ft=ruby

" load some personal configuration I don't want in a public repository
if filereadable($HOME.'/.vim/vimrc_private')
  source $HOME/.vim/vimrc_private
endif

" git commit messages with spell checking and textwidth
autocmd Filetype gitcommit setlocal spell textwidth=72

" command to open easily this file
command! Evimrc e ~/.vim/vimrc
command! Svimrc sp ~/.vim/vimrc
command! Vvimrc vs ~/.vim/vimrc

" command to reload local vim configuration
command! Vimrc source $MYVIMRC

" command to open easily my main zsh config file
command! Eoh e ~/.oh-my-zsh/custom/custom.zsh
command! Soh sp ~/.oh-my-zsh/custom/custom.zsh
command! Voh vp ~/.oh-my-zsh/custom/custom.zsh

" toggle search matches highlighting
nnoremap <leader>h :set hlsearch!<CR>

" indent all file & return to current line
nnoremap <F6> gg=G''

" force page refresing
nnoremap <F5> :redraw!<CR>

" tab navigation
nnoremap [t :tabprevious<CR>
nnoremap ]t :tabNext<CR>
nnoremap [T :tabfirst<CR>
nnoremap ]T :tablast<CR>

" Jump to last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

""" NEOVIM SPECIFIC CONFIGURATION """
if has('nvim')
  " ESC exits insert mode from a terminal buffer
  tnoremap <ESC> <C-\><C-n>

  " Transparently changing windows from a terminal buffer
  tnoremap <C-w>h <C-\><C-n><C-w>h
  tnoremap <C-w>j <C-\><C-n><C-w>j
  tnoremap <C-w>k <C-\><C-n><C-w>k
  tnoremap <C-w>l <C-\><C-n><C-w>l

  " Start insert mode when entering a terminal
  autocmd BufEnter term://* startinsert

  " Terminal true colors
  set termguicolors
end

""" START PLUG CONFIGURATION (https://github.com/junegunn/vim-plug) """

call plug#begin('~/.vim/plugged')

" Surround text
Plug 'tpope/vim-surround'

" Utility functions used by other plugins
Plug 'tomtom/tlib_vim'

" File manager
Plug 'scrooloose/nerdtree'

nnoremap <leader>t :NERDTreeToggle<CR> 

" Ruby configuration
Plug 'vim-ruby/vim-ruby'

" Slim support
Plug 'slim-template/vim-slim'

" Search text under visual selection
Plug 'bronson/vim-visual-star-search'

" Coffee Script support
Plug 'kchmck/vim-coffee-script'

" Easily align tables
Plug 'godlygeek/tabular'

" Color scheme
Plug 'romainl/Apprentice'

" Nix support
Plug 'LnL7/vim-nix'

" Auto-completion for quotes, parens, brackets, etc.
Plug 'Raimondi/delimitMate'

" Personal wiki
Plug 'vimwiki/vimwiki'

let g:vimwiki_list = [{'path': '~/wiki/', 'path_html': '~/wiki_html/', 'syntax': 'markdown', 'ext': '.md'}]

" Git client
Plug 'tpope/vim-fugitive'
Plug 'lambdalisue/gina.vim'

nnoremap <leader>gg :Git 
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gW :Gwrite<CR>:Gcommit<CR>
nnoremap <leader>gM :Gwrite<CR>:Git commit --amend<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>g. :Git add .<CR>
nnoremap <leader>gm :Git commit --amend<CR>
nnoremap <leader>gA :Git commit -a<CR>

"add git branch to the status line with fugitive
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" Easily search for, substitute, and abbreviate multiple variants of a word 
Plug 'tpope/vim-abolish'

" Multiple cursors
Plug 'terryma/vim-multiple-cursors'

" Maps for bidirectional commands
Plug 'tpope/vim-unimpaired'

" Enable repeating supported plugin maps with "."
Plug 'tpope/vim-repeat'

" Smart command dispatching
Plug 'tpope/vim-dispatch'

" Git diff in the gutter
Plug 'airblade/vim-gitgutter'

" File, buffer, mru, tag finder
Plug 'ctrlpvim/ctrlp.vim'

" Use ripper-tags if present to index: much faster than grep
if executable('rg')
  let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --glob ""'
endif

" Remeber last mode (https://github.com/kien/ctrlp.vim/issues/330)
let g:ctrlp_cmd = 'call CallCtrlP()'
func! CallCtrlP()
  if exists('s:called_ctrlp')
    CtrlPLastMode
  else
    let s:called_ctrlp = 1
    CtrlP
  endif
endfunc

" Open urls, favorites and searchs from vim
Plug 'waiting-for-dev/vim-www'

let g:www_launch_cli_browser_command = "elinks"
let g:www_shortcut_engines = { 
      \ 'devdocs': ['Devdocs', '<leader>K'],
      \ 'google': ['Google'],
      \ 'duckduckgo': ['Duckduckgo'],
      \ 'github': ['Github'],
      \ }

" Elixir support
Plug 'elixir-lang/vim-elixir'

" Elm support
Plug 'lambdatoast/elm.vim'
Plug 'elmcast/elm-vim'

" Comment stuff
Plug 'tpope/vim-commentary'

" Codeclimate integration
Plug 'wfleming/vim-codeclimate'

" Run your tests at the speed of thought
Plug 'janko-m/vim-test'

nnoremap <silent> <leader>t :TestNearest<CR>
nnoremap <silent> <leader>tf :TestFile<CR>
nnoremap <silent> <leader>ta :TestSuite<CR>
nnoremap <silent> <leader>tl :TestLast<CR>
nnoremap <silent> <leader>tv :TestVisit<CR>
let test#strategy = "neovim"

"Better javascript support
Plug 'pangloss/vim-javascript'

" Scratch buffer
Plug 'mtth/scratch.vim'

let g:scratch_persistence_file = '.scratch.vim'
let g:scratch_autohide = 1
let g:scratch_insert_autohide = 0
let g:scratch_no_mappings = 1
noremap <leader>s :Scratch<CR>

" Better haskell support
Plug 'neovimhaskell/haskell-vim'

" Snippets
Plug 'honza/vim-snippets'

" Intellisense and Language Server Protocol
Plug 'neoclide/coc.nvim', { 'do': 'yarn install --frozen-lockfile' }

" Extensions
let g:coc_global_extensions = ['coc-solargraph', 'coc-snippets', 'coc-json']

" Make <tab> used for trigger completion, completion confirm and snippet expand.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Multiple cursors
nnoremap <silent> <leader>m <Plug>(coc-cursors-position)
nnoremap <silent> <leader>mw <Plug>(coc-cursors-word)
xnoremap <silent> <leader>mw <Plug>(coc-cursors-range)

" Use `[g` and `]g` to navigate diagnostics
nnoremap <silent> [g <Plug>(coc-diagnostic-prev)
nnoremap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nnoremap <silent> <leader>gd <Plug>(coc-definition)
nnoremap <silent> <leader>gt <Plug>(coc-type-definition)
nnoremap <silent> <leader>gi <Plug>(coc-implementation)
nnoremap <silent> <leader>gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nnoremap <leader>r <Plug>(coc-rename)

" Remap for format selected region
xnoremap <leader>f  <Plug>(coc-format-selected)
nnoremap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xnoremap <leader>as  <Plug>(coc-codeaction-selected)
nnoremap <leader>as  <Plug>(coc-codeaction-selected)
" Remap for do codeAction of current line
nnoremap <leader>a  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nnoremap <leader>q  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xnoremap <leader>fi <Plug>(coc-funcobj-i)
xnoremap <leader>fa <Plug>(coc-funcobj-a)
onoremap <leader>fi <Plug>(coc-funcobj-i)
onoremap <leader>fa <Plug>(coc-funcobj-a)

" Select selections ranges, needs server support, like: coc-tsserver, coc-python
nnoremap <silent> <leader>rs <Plug>(coc-range-select)
xnoremap <silent> <leader>rs <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" nvim plugins
if has('nvim')
  " Wrapper of some neovim's :terminal functions
  Plug 'kassio/neoterm'
end

call plug#end()

" This needs to be called outside Plug block

colorscheme apprentice

