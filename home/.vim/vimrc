"""SETTINGS"""

syntax on "enable syntax highlighting

"jump to last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set shiftwidth=3 "number of spaces for (auto)indent

set expandtab "use spaces instead of tabs

set ignorecase "do case insensitive matching

set smartcase "do smart case matching

set incsearch "incremental search

set mouse=a "enable mouse usage (all modes)

set backspace=indent,eol,start "avoid backspace problems (http://vim.wikia.com/wiki/Backspace_and_delete_problems)

set vb "silent bell

set ruler "Show column and line position

let mapleader=','

"""START NEOBUNDLE CONFIGURATION (https://github.com/Shougo/neobundle.vim)"""

if has('vim_starting')
   set rtp+=~/.vim/bundle/neobundle.vim/ "add neobundle path to runtimepath
end

call neobundle#rc(expand('~/.vim/bundle/'))

"neobundle intself
NeoBundleFetch 'Shougo/neobundle.vim'

"GitHub repos
NeoBundle 'othree/html5.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'tpope/vim-haml'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'leshill/vim-json'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-rake'
NeoBundle 'tpope/vim-bundler'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'slim-template/vim-slim'
NeoBundle 'evidens/vim-twig'
NeoBundle 'bronson/vim-visual-star-search'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'godlygeek/tabular'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'othree/xml.vim'
NeoBundle 'embear/vim-localvimrc'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'vimwiki/vimwiki'
NeoBundle 'endel/vim-github-colorscheme'
NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'christoomey/vim-tmux-navigator'
NeoBundle 'benmills/vimux'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'Kris2k/ZoomWin-vim'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'sirver/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'skalnik/vim-vroom'
NeoBundle 'jeetsukumaran/vim-buffergator'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'chrisbra/NrrwRgn'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'Lokaltog/vim-easymotion'

"vim-scripts repos
NeoBundle 'AutoTag'
NeoBundle 'VimRepress'
NeoBundle 'loremipsum'
NeoBundle 'CSApprox'
NeoBundle 'dbext.vim'

NeoBundleCheck

filetype plugin indent on

"""PLUGINS CONFIGURATION"""

"tagbar
nmap <leader>t :TagbarToggle<CR>

"gtranslate
let g:goog_user_conf = [{'langpair': 'es|en', 'v_key': 'T'}]

"localvimrc
let g:localvimrc_ask = 0 "do not ask to load local vimrc

"loremipsum
let g:loremipsum_marker = {}
let g:loremipsum_paragraph_template = {
         \ 'html': '<p>%s</p>',
         \ 'php': '<p>%s</p>',
         \ 'slim': 'p %s',
         \ }

"youcompleteme
"let g:EclimCompletionMethod = 'omnifunc' "if using eclim uncomment this line

"syntastic
let g:syntastic_mode_map = { 'mode': 'active',
         \ 'active_filetypes': ['php', 'ruby', 'css', 'html'], }
let g:syntastic_php_checkers = ['php']

"vimwiki
let g:vimwiki_list = [{'path': '~/wiki/', 'path_html': '~/wiki_html/', 'syntax': 'markdown', 'ext': '.md'}]

"zoomwin
map <C-x> :ZoomWin<CR>

"ultisnips & youcompleteme
"http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme/18685821#18685821
"https://github.com/Valloric/YouCompleteMe/issues/36
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction
au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item 
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
"inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"vim-vroom
let g:vroom_use_spring=1
let g:vroom_use_vimux=1

"vimux
map <Leader>l :VimuxRunLastCommand<CR>

"buffergator
let g:buffergator_viewport_split_policy='T'

"""COLOR SCHEMES"""
if $COLORTERM == 'gnome-terminal'
   set t_Co=256
   "if using solarized, uncomment following three lines
   "set background=light
   colorscheme solarized
   "if using github, uncomment following three lines
   "colorscheme  github
   "set background=light
   "colorscheme tomorrow
   "source $HOME/.vim/colorschemes/tomorrow/colors/Tomorrow-Night-Blue.vim
endif
" http://sunaku.github.io/vim-256color-bce.html
set t_ut=

"""OTHER OPTIONS"""

set laststatus=2 "Always show status line

"when writting e-mails with gmail with <<It's All Text>> Firefox plugin
"(https://addons.mozilla.org/En-us/firefox/addon/its-all-text/)
"set textwidth to 80 characters
autocmd BufNewFile,BufRead mail.google.com* set tw=80

"for writing Calibre recipes (http://manual.calibre-ebook.com/news.html)
"which are python classes
autocmd BufNewFile,BufRead *.recipe set ft=python

"load some personal configuration I don't want in a public repository
if filereadable($HOME.'/.vim/vimrc_private')
   source $HOME/.vim/vimrc_private
endif

"encryption
set cm=blowfish "use blowfish for encryption
autocmd BufNewFile,BufRead *.enc set nobackup noswapfile nowritebackup viminfo= "enc extension will be used for encrypted files

"git
autocmd Filetype gitcommit setlocal spell textwidth=72 "commit messages with spell checking and textwidth
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P "add git branch to the status line with fugitive

"command to open easily this file
command! Esource e ~/.vim/vimrc
command! Ssource sp ~/.vim/vimrc
command! Vsource vp ~/.vim/vimrc
"command to reload local vim configuration
command! Source source $MYVIMRC
