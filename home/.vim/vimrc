""" SETTINGS """

" Enable syntax highlighting
syntax on

" Enable spell check
set spell

" Number of spaces for (auto)indent
set shiftwidth=2

" Use spaces instead of tabs
set expandtab

" Do case insensitive matching
set ignorecase

" Do smart case matching
set smartcase

" Incremental search
set incsearch

" Enable mouse usage (all modes)
set mouse=a

" Avoid backspace problems (http://vim.wikia.com/wiki/Backspace_and_delete_problems)
set backspace=indent,eol,start

" Silent bell
set vb

" Show column and line position
set ruler

" Define mapleader
let mapleader = ','

" Always show status line
set laststatus=2

" Do not highlight search results
set nohlsearch

" Number of colors
set t_Co=256

" Emacs bindings to move in command line (see :help emacs-keys)
" start of line
:cnoremap <C-A>		<Home>
" back one character
:cnoremap <C-B>		<Left>
" delete character under cursor
:cnoremap <C-D>		<Del>
" end of line
:cnoremap <C-E>		<End>
" forward one character
:cnoremap <C-F>		<Right>
" recall newer command-line
:cnoremap <C-N>		<Down>
" recall previous (older) command-line
:cnoremap <C-P>		<Up>
" back one word
:cnoremap <Esc><C-B>	<S-Left>
" forward one word
:cnoremap <Esc><C-F>	<S-Right>

""" OTHER CONFIGURATION """

" for writing Calibre recipes (http://manual.calibre-ebook.com/news.html)
" which are python classes
autocmd BufNewFile,BufRead *.recipe set ft=python

" rabl templates are ruby files
autocmd BufNewFile,BufRead *.rabl set ft=ruby

" load some personal configuration I don't want in a public repository
if filereadable($HOME.'/.vim/vimrc_private')
  source $HOME/.vim/vimrc_private
endif

" git
autocmd Filetype gitcommit setlocal spell textwidth=72 "commit messages with spell checking and textwidth

" command to open easily this file
command! Evimrc e ~/.vim/vimrc
command! Svimrc sp ~/.vim/vimrc
command! Vvimrc vs ~/.vim/vimrc

" command to reload local vim configuration
command! Vimrc source $MYVIMRC

" command to open easily my main zsh config file
command! Eoh e ~/.oh-my-zsh/custom/custom.zsh
command! Soh sp ~/.oh-my-zsh/custom/custom.zsh
command! Voh vp ~/.oh-my-zsh/custom/custom.zsh

" mapping to close quickfix windows
nnoremap <F8> :cclose<CR>

" toggle search matches highlighting
:noremap <F12> :set hlsearch!<CR>

" indent all file & return to current line
nnoremap <F6> gg=G''

" force page refresing
nnoremap <F5> :redraw!<CR>

" tab navigation
nnoremap <leader>tp :tabprevious<CR>
nnoremap <leader>tn :tabNext<CR>
nnoremap <leader>tP :tabfirst<CR>
nnoremap <leader>tN :tablast<CR>

" Easily find todo's
nnoremap <leader><leader>t :Ggrep TODO:<CR>

" Jump to last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

""" NEOVIM SPECIFIC CONFIGURATION """
if has('nvim')
  " ESC exits insert mode from a terminal buffer
  tnoremap <ESC> <C-\><C-n>

  " Transparently changing windows from a terminal buffer
  tnoremap <C-w>h <C-\><C-n><C-w>h
  tnoremap <C-w>j <C-\><C-n><C-w>j
  tnoremap <C-w>k <C-\><C-n><C-w>k
  tnoremap <C-w>l <C-\><C-n><C-w>l

  " Start insert mode when entering a terminal
  autocmd BufEnter term://* startinsert

  " https://github.com/neovim/neovim/wiki/Following-HEAD#20160511
  set termguicolors

  " Make C-h work on nvim/tmux for vim-tmux-navigator plugin
  " https://github.com/christoomey/vim-tmux-navigator#it-doesnt-work-in-neovim-specifically-c-h
  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
end

""" START PLUG CONFIGURATION (https://github.com/junegunn/vim-plug) """

call plug#begin('~/.vim/plugged')

" Surround text
Plug 'tpope/vim-surround'

" Utility functions used by other plugins
Plug 'tomtom/tlib_vim'

" File manager
Plug 'scrooloose/nerdtree'

nmap <leader>f :NERDTreeToggle<CR> 
" Utilities for rails
Plug 'tpope/vim-rails'

" Utilities for ruby and gems development
Plug 'tpope/vim-rake'

" Project configuration
Plug 'tpope/vim-projectionist'

" Utilities for bundle
Plug 'tpope/vim-bundler'

" Navigate painlessly between vim/tmux windows
Plug 'christoomey/vim-tmux-navigator'

" Ruby configuration
Plug 'vim-ruby/vim-ruby'

" Slim support
Plug 'slim-template/vim-slim'

" Twig support
Plug 'evidens/vim-twig'

" Search text under visual selection
Plug 'bronson/vim-visual-star-search'

" Coffee Script support
Plug 'kchmck/vim-coffee-script'

" Easily align tables
Plug 'godlygeek/tabular'

" Color scheme
Plug 'altercation/vim-colors-solarized'

" Auto-completion for quotes, parens, brackets, etc.
Plug 'Raimondi/delimitMate'

" Personal wiki
Plug 'vimwiki/vimwiki'

let g:vimwiki_list = [{'path': '~/wiki/', 'path_html': '~/wiki_html/', 'syntax': 'markdown', 'ext': '.md'}]

" Syntax error detection
Plug 'scrooloose/syntastic'

let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['php', 'ruby', 'css', 'html'], }
let g:syntastic_php_checkers = ['php']
let g:syntastic_ruby_checkers = ['ruby', 'rubocop', 'reek']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 1

" Git client
Plug 'tpope/vim-fugitive'

nmap <leader>gg :Git 
nmap <leader>gs :Gstatus<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gr :Gread<CR>
nmap <leader>gw :Gwrite<CR>
nmap <leader>gW :Gwrite<CR>:Gcommit<CR>
nmap <leader>gM :Gwrite<CR>:Git commit --amend<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>g. :Git add .<CR>
nmap <leader>gm :Git commit --amend<CR>
nmap <leader>gA :Git commit -a<CR>

"add git branch to the status line with fugitive
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" Easily search for, substitute, and abbreviate multiple variants of a word 
Plug 'tpope/vim-abolish'

" Snippets generation & built-in snippets
Plug 'sirver/ultisnips' | Plug 'honza/vim-snippets'

let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-e>"

" Tag navigation in a side window
Plug 'majutsushi/tagbar'

nmap <leader>t :TagbarToggle<CR>

" Multiple cursors
Plug 'terryma/vim-multiple-cursors'

" Maps for bidirectional commands
Plug 'tpope/vim-unimpaired'

" Enable repeating supported plugin maps with "."
Plug 'tpope/vim-repeat'

" Smart command dispatching
Plug 'tpope/vim-dispatch'

" Git diff in the gutter
Plug 'airblade/vim-gitgutter'

" File, buffer, mru, tag finder
Plug 'kien/ctrlp.vim'

" Remeber last mode (https://github.com/kien/ctrlp.vim/issues/330)
let g:ctrlp_cmd = 'call CallCtrlP()'
func! CallCtrlP()
  if exists('s:called_ctrlp')
    CtrlPLastMode
  else
    let s:called_ctrlp = 1
    CtrlP
  endif
endfunc

" Open urls, favorites and searchs from vim
" Plug 'waiting-for-dev/vim-www'
Plug '~/projects/vim/vim-www/'

if filereadable($HOME.'/.vim/www_urls.vim')
  source $HOME/.vim/www_urls.vim
endif
" let g:www_launch_browser_command = "google-chrome {{URL}} &"
let g:www_launch_cli_browser_command = "elinks"
let g:www_shortcut_engines = { 
      \ 'devdocs': ['Dev', '<leader>k'],
      \ 'google': ['Google'],
      \ 'duckduckgo': ['Duckduckgo'],
      \ 'github': ['Github'],
      \ }

" Elixir support
Plug 'elixir-lang/vim-elixir'

" Comment stuff
Plug 'tpope/vim-commentary'

" Codeclimate integration
Plug 'wfleming/vim-codeclimate'

" Run your tests at the speed of thought
Plug 'janko-m/vim-test'

nmap <silent> <leader>r :TestNearest<CR>
nmap <silent> <leader>R :TestFile<CR>
nmap <silent> <leader>A :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
let test#strategy = "dispatch"
let g:test#ruby#rspec#executable = 'docker-compose exec app bundle exec rspec'

" Publish to wordpress
Plug 'vim-scripts/VimRepress'

" Makes GVim-only colorschemes Just Work in terminal Vim
Plug 'vim-scripts/CSApprox'

"Automatic tags generation
Plug 'craigemery/vim-autotag'

"Autocompletion
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }

" nvim plugins
if has('nvim')
  " Wrapper of some neovim's :terminal functions
  Plug 'kassio/neoterm'

  " Autocompletion
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
end

call plug#end()

" This needs to be called outside Plug block

colorscheme solarized
